plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
data_protein <- data[, 2:5]
wss <- sapply(1:k.max,
function(k){kmeans(data_protein, k, nstart=50,iter.max = 15 )$tot.withinss})
wss
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
# clustering the data using pheatmap
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 4)
data_clusters <- tbl_df(cbind(hgnc_symbol = data$hgnc_symbol, cluster = heatmap_clusters$kmeans$cluster))
data_with_clusters <- full_join(data, data_clusters)
ggplot(data = data_with_clusters %>% filter(cluster == 1), mapping = aes(x = logFC.timehour14, y = hl.ratio)) + geom_point()
ggplot(data = data_with_clusters %>% filter(cluster == 1), mapping = aes(x = logFC.timehour14, y = hl.ratio)) + geom_point()
ggplot(data = data_with_clusters %>% filter(cluster == 2), mapping = aes(x = logFC.timehour14, y = hl.ratio)) + geom_point()
ggplot(data = data_with_clusters %>% filter(cluster == 3), mapping = aes(x = logFC.timehour14, y = hl.ratio)) + geom_point()
ggplot(data = data_with_clusters %>% filter(cluster == 4), mapping = aes(x = logFC.timehour14, y = hl.ratio)) + geom_point()
heatmap_clusters
pheatmap(mat = data[,2:4], kmeans_k = 4)
pheatmap(mat = data[,2:4], kmeans_k = 4)
pheatmap(mat = data[,2:4], kmeans_k = 4)
pheatmap(mat = data[,2:4], kmeans_k = 4)
pheatmap(mat = data[,2:4], kmeans_k = 4)
pheatmap(mat = data[,2:4], kmeans_k = 4)
pheatmap(mat = data[,2:4], kmeans_k = 4)
pheatmap(mat = data[,2:4], kmeans_k = 4)
pheatmap(mat = data[,2:4], kmeans_k = 4)
pheatmap(mat = data[,2:4], kmeans_k = 4)
pheatmap(mat = data[,2:4], kmeans_k = 4)
pheatmap(mat = data[,2:4], kmeans_k = 4)
pheatmap(mat = data[,2:4], kmeans_k = 4)
pheatmap(mat = data[,2:4], kmeans_k = 4)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 10)
ggplot(data = data_with_clusters %>% filter(cluster == 8), mapping = aes(x = logFC.timehour14, y = hl.ratio)) + geom_point()
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 10)
data_clusters <- tbl_df(cbind(hgnc_symbol = data$hgnc_symbol, cluster = heatmap_clusters$kmeans$cluster))
data_with_clusters <- full_join(data, data_clusters)
ggplot(data = data_with_clusters %>% filter(cluster == 9), mapping = aes(x = logFC.timehour14, y = hl.ratio)) + geom_point()
heatmap_clusters$kmeans
heatmap_clusters$kmeans$cluster
heatmap_clusters$kmeans$centers
pheatmap(mat = data[,2:4], kmeans_k = 10)
pheatmap(mat = data[,2:4], kmeans_k = 10)
pheatmap(mat = data[,2:4], kmeans_k = 10)
pheatmap(mat = data[,2:4], kmeans_k = 10)
pheatmap(mat = data[,2:4], kmeans_k = 10)
kmm <- kmeans(data[,2:4], 6, nstart = 50, iter.max = 15)
kmm$centers
kmm <- kmeans(data[,2:4], 10, nstart = 50, iter.max = 15)
kmm$centers
kmm <- kmeans(data[,2:4], 10, nstart = 50, iter.max = 15)
kmm$centers
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters1 <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters2 <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters3 <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters4 <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters1
heatmap_clusters2
heatmap_clusters3
heatmap_clusters4
heatmap_clusters1$kmeans$centers
heatmap_clusters2$kmeans$centers
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
data_with_clusters %>% filter(cluster == 1) %>% select(hgnc_symbol)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters
data_with_clusters %>% filter(cluster == 2) %>% select(hgnc_symbol)
data_clusters <- tbl_df(cbind(hgnc_symbol = data$hgnc_symbol, cluster = heatmap_clusters$kmeans$cluster))
# join the data_clusters with fold change data to enable plotting
data_with_clusters <- full_join(data, data_clusters)
data_with_clusters %>% filter(cluster == 2) %>% select(hgnc_symbol)
data <- foldchange[, c(3, 16:18)]
data <- data[complete.cases(data), ]
data <- left_join(data, data_proteomics, by = c("hgnc_symbol" = "geneid"))
data <- data[, c(1:5)]
data <- data %>% filter(hl.ratio != "NA")
data$hl.ratio <- as.numeric(as.character(data$hl.ratio))
nrow(data)
data <- unique(data)
nrow(data)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
# add the cluster information to the hgnc_symbol
data_clusters <- tbl_df(cbind(hgnc_symbol = data$hgnc_symbol, cluster = heatmap_clusters$kmeans$cluster))
heatmap_clusters
# join the data_clusters with fold change data to enable plotting
data_with_clusters <- full_join(data, data_clusters)
data_with_clusters %>% filter(cluster == 3) %>% select(hgnc_symbol)
knitr::opts_chunk$set(echo = TRUE)
# Trick to install packages
list.of.packages <- c("here",
"tidyverse",
"reshape2",
"ggplot2",
"ggthemes",
"ggrepel",
"scales",
"viridis",
"corrplot",
"pheatmap",
"edgeR")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library("tidyverse")
library("here")
library("edgeR")
library("pheatmap")
library("ggthemes")
here()
setwd(here())
data_gene_level <- read_csv(here("5-class5",
"data",
"input",
"data_gene-level.csv"))
data_proteomics <- read_csv(here("5-class5",
"data",
"input",
"data_proteomics.csv"))
geneExpr <- data_gene_level %>% #pipe data to next step
select(-X1, -hgnc_symbol) %>% #Remove row# column and gene symbol
rename(id = ensembl_gene_id) %>% #rename the ensembl_gene_id to id
filter(!is.na(id)) # remove rows with no gene ids.
# Converting the tibble to a data.frame to move gene ids into rownames and generate the count matrix.
geneExpr <- data.frame(geneExpr)
row.names(geneExpr) <- geneExpr$id
x <- geneExpr[, c(2:13)]
# 1. subset data - no need here. We are going to use all samples.
# 2. Define sample grouping
time <- factor( c("hour00", "hour00", "hour00", "hour04", "hour04", "hour04", "hour08", "hour08", "hour08", "hour14", "hour14", "hour14"))
# 3. Generate a DGE list
d <- DGEList(counts=x, group = time)
# 4. Filter genes with low counts (require >1 cpm in at least 1/2 of the samples)
keep <- rowSums(cpm(d)>1) >= 3
d <- d[keep, , keep.lib.sizes=FALSE]
# 5. Calculate normalization factors to scale the raw library sizes.
d <- calcNormFactors(d)
# 6. create a model matrix to allow linear modeling
design <- model.matrix(~time)
# 7. estimate dispersion
d <- estimateDisp(d, design)
# 8. Fit a generalized linear model
d1 <- glmFit(d, design)
# 9. Conduct Tagwise likelihood ratio tests for DGEGLM
d2 <- glmLRT(d1, coef=2:4)
# 10. Extract the most differentially expressed genes.
DUX4 <- topTags(d2, n=10733)
#DUX4 <- topTags(d2, n = Inf)
#DUX4 <- topTags(d2, n=500)
foldchange <- cbind(id = row.names(DUX4$table), DUX4$table)
foldchange <- left_join(data_gene_level, foldchange, by = c("ensembl_gene_id" = "id"))
foldchange <- unique(foldchange)
#input proteomics data
data_proteomics <- data_proteomics[, 2:4]
# combine RNA-seq and proteomics data
data <- foldchange[, c(3, 16:18)]
data <- data[complete.cases(data), ]
data <- left_join(data, data_proteomics, by = c("hgnc_symbol" = "geneid"))
data <- data[, c(1:5)]
data <- data %>% filter(hl.ratio != "NA")
data$hl.ratio <- as.numeric(as.character(data$hl.ratio))
data <- unique(data)
# clustering the data using pheatmap
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 3) # notice the clusters corresponding to increased expression over time. Could be direct vs. indirect targets. This is a way to generate hypotheses to test.
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 10) # the number of clusters we pick determines how much we under or overfit the data to form clusters.
# Another issue is that with this many clusters, doing the clustering just once does not converge into a single set of centers.
heatmap_clusters1 <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters2 <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters3 <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters4 <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters$kmeans$centers # find the mean values or centers of the different clusters
heatmap_clusters1$kmeans$centers
heatmap_clusters2$kmeans$centers
heatmap_clusters3$kmeans$centers
heatmap_clusters4$kmeans$centers
# How could you get kmeans to converge? You could calcualte it iteratively.
kmm <- kmeans(data[,2:4], 10, nstart = 50, iter.max = 15)
kmm$centers
# finding the number of clusters using the "elbow" method
set.seed(123)
k.max <- 15
data_rna <- data[, 2:4]
wss <- sapply(1:k.max,
function(k){kmeans(data_rna, k, nstart=50,iter.max = 15 )$tot.withinss})
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
# what happens if you increase the complexity of the data you are clustering? you need more clusters!
data_protein <- data[, 2:5]
wss <- sapply(1:k.max,
function(k){kmeans(data_protein, k, nstart=50,iter.max = 15 )$tot.withinss})
wss
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
# exploring the clusters and exporting gene names to conduct GO analysis.
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters$kmeans$cluster # find which gene is assigned to which cluster
# add the cluster information to the hgnc_symbol
data_clusters <- tbl_df(cbind(hgnc_symbol = data$hgnc_symbol, cluster = heatmap_clusters$kmeans$cluster))
# join the data_clusters with fold change data to enable plotting
data_with_clusters <- full_join(data, data_clusters)
# plotting
ggplot(data = data_with_clusters %>% filter(cluster == 1), mapping = aes(x = logFC.timehour14, y = hl.ratio)) + geom_point()
ggplot(data = data_with_clusters %>% filter(cluster == 8), mapping = aes(x = logFC.timehour14, y = hl.ratio)) + geom_point()
data_with_clusters %>% filter(cluster == 1) %>% select(hgnc_symbol)
data_with_clusters %>% filter(cluster == 2) %>% select(hgnc_symbol)
sessionInfo()
data_proteomics <- data_proteomics[, 2:4]
# combine RNA-seq and proteomics data
data <- foldchange[, c(3, 16:18)]
data <- data[complete.cases(data), ]
data <- left_join(data, data_proteomics, by = c("hgnc_symbol" = "geneid"))
data <- data[, c(1:5)]
data <- data %>% filter(hl.ratio != "NA")
data$hl.ratio <- as.numeric(as.character(data$hl.ratio))
data <- unique(data)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 3)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 3)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 3)heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 3)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 3)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 3)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 3)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 3)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 3)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 3)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 3)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 3)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 3)
data <- foldchange[, c(3, 16:18)]
nrow(data)
names(data)
data <- data[complete.cases(data), ]
nrow(data)
data <- data[, c(1:4)]
names(data)
data <- unique(data)
nrow(data)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 3)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 3)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 3)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 3)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 3)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 10)
kmm <- kmeans(data[,2:4], 10, nstart = 50, iter.max = 15)
kmm$centers
set.seed(123)
k.max <- 15
data_rna <- data[, 2:4]
wss <- sapply(1:k.max,
function(k){kmeans(data_rna, k, nstart=50,iter.max = 15 )$tot.withinss})
warnings()
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
# plotting
ggplot(data = data_with_clusters %>% filter(cluster == 1), mapping = aes(x = logFC.timehour14, y = hl.ratio)) + geom_point()
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters$kmeans$cluster # find which gene is assigned to which cluster
# add the cluster information to the hgnc_symbol
data_clusters <- tbl_df(cbind(hgnc_symbol = data$hgnc_symbol, cluster = heatmap_clusters$kmeans$cluster))
# join the data_clusters with fold change data to enable plotting
data_with_clusters <- full_join(data, data_clusters)
# plotting
ggplot(data = data_with_clusters %>% filter(cluster == 1), mapping = aes(x = logFC.timehour14, y = hl.ratio)) + geom_point()
# plotting
ggplot(data = data_with_clusters %>% filter(cluster == 1), mapping = aes(x = logFC.timehour04, y = logFC.timehour14)) + geom_point()
ggplot(data = data_with_clusters %>% filter(cluster == 1), mapping = aes(x = logFC.timehour04, y = logFC.timehour14)) + geom_point()
ggplot(data = data_with_clusters %>% filter(cluster == 4), mapping = aes(x = logFC.timehour04, y = logFC.timehour14)) + geom_point()
ggplot(data = data_with_clusters %>% filter(cluster == 2), mapping = aes(x = logFC.timehour04, y = logFC.timehour14)) + geom_point()
ggplot(data = data_with_clusters %>% filter(cluster == 3), mapping = aes(x = logFC.timehour04, y = logFC.timehour14)) + geom_point()
data_with_clusters %>% filter(cluster == 1) %>% select(hgnc_symbol)
data_with_clusters %>% filter(cluster == 2) %>% select(hgnc_symbol)
data_with_clusters %>% filter(cluster == 3) %>% select(hgnc_symbol)
data_with_clusters %>% filter(cluster == 4) %>% select(hgnc_symbol)
list.of.packages <- c("here",
"tidyverse",
"reshape2",
"ggplot2",
"ggthemes",
"ggrepel",
"scales",
"viridis",
"corrplot",
"pheatmap",
"edgeR")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library("tidyverse")
library("here")
library("edgeR")
library("pheatmap")
library("ggthemes")
here()
setwd(here())
knitr::opts_chunk$set(echo = TRUE)
data_gene_level <- read_csv(here("5-class5",
"data",
"input",
"data_gene-level.csv"))
data_proteomics <- read_csv(here("5-class5",
"data",
"input",
"data_proteomics.csv"))
geneExpr <- data_gene_level %>% #pipe data to next step
select(-X1, -hgnc_symbol) %>% #Remove row# column and gene symbol
rename(id = ensembl_gene_id) %>% #rename the ensembl_gene_id to id
filter(!is.na(id)) # remove rows with no gene ids.
str(geneExpr)
geneExpr <- data.frame(geneExpr)
row.names(geneExpr) <- geneExpr$id
x <- geneExpr[, c(2:13)]
str(x)
time <- factor( c("hour00", "hour00", "hour00", "hour04", "hour04", "hour04", "hour08", "hour08", "hour08", "hour14", "hour14", "hour14"))
time
# 3. Generate a DGE list
d <- DGEList(counts=x, group = time)
d
keep <- rowSums(cpm(d)>1) >= 3
d <- d[keep, , keep.lib.sizes=FALSE]
dim(d$counts)
# 5. Calculate normalization factors to scale the raw library sizes.
d <- calcNormFactors(d)
str(d)
# 6. create a model matrix to allow linear modeling
design <- model.matrix(~time)
design
# 8. Fit a generalized linear model
d1 <- glmFit(d, design)
# 7. estimate dispersion
d <- estimateDisp(d, design)
# 8. Fit a generalized linear model
d1 <- glmFit(d, design)
# 9. Conduct Tagwise likelihood ratio tests for DGEGLM
d2 <- glmLRT(d1, coef=2:4)
# 10. Extract the most differentially expressed genes.
DUX4 <- topTags(d2, n=10733)
DUX4
head(DUX4)
str(DUX4)
foldchange <- cbind(id = row.names(DUX4$table), DUX4$table)
foldchange <- left_join(data_gene_level, foldchange, by = c("ensembl_gene_id" = "id"))
foldchange <- unique(foldchange)
str(foldchange)
head(data_proteomics)
#input proteomics data
data_proteomics <- data_proteomics[, 2:4]
head(data_proteomics)
names(foldchange)
data <- foldchange[, c(3, 16:18)]
names(data)
complete.cases(data)
data <- data[complete.cases(data), ]
data <- left_join(data, data_proteomics, by = c("hgnc_symbol" = "geneid"))
names(data)
data <- data[, c(1:5)]
names(data)
data <- data %>% filter(hl.ratio != "NA")
class(data)
class(data$hl.ratio)
data <- unique(data)
dim(data)
names(data)
pheatmap(mat = data[,2:4], kmeans_k = 3)
pheatmap(mat = data[,2:4], kmeans_k = 3)
pheatmap(mat = data[,2:4], kmeans_k = 3)
pheatmap(mat = data[,2:4], kmeans_k = 3)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 10)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 10)
kmm <- kmeans(data[,2:4], 10, nstart = 50, iter.max = 15)
names(kmm)
kmm$centers
set.seed(123)
k.max <- 15
wss <- sapply(1:k.max,
function(k){kmeans(data_rna, k, nstart=50,iter.max = 15 )$tot.withinss})
data_rna <- data[, 2:4]
wss <- sapply(1:k.max,
function(k){kmeans(data_rna, k, nstart=50,iter.max = 15 )$tot.withinss})
wss
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
data_protein <- data[, 2:5]
wss <- sapply(1:k.max,
function(k){kmeans(data_protein, k, nstart=50,iter.max = 15 )$tot.withinss})
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
pheatmap(mat = data[,2:4], kmeans_k = 6)
heatmap_clusters <- pheatmap(mat = data[,2:4], kmeans_k = 6)
names(heatmap_clusters)
plot(heatmap_clusters$tree_row)
plot(heatmap_clusters$tree_cols)
plot(heatmap_clusters$tree_col)
heatmap_clusters$kmeans
heatmap_clusters$kmeans$centers
heatmap_clusters$kmeans$cluster
data_clusters <- tbl_df(
cbind(hgnc_symbol = data$hgnc_symbol,
cluster = heatmap_clusters$kmeans$cluster))
head(data_clusters)
data_with_clusters <- full_join(data, data_clusters)
head(data_with_clusters)
glimpse(data_with_clusters)
ggplot(data = data_with_clusters %>% filter(cluster == 1), mapping = aes(x = logFC.timehour08, y = logFC.timehour14)) + geom_point()
data_with_clusters %>% filter(cluster == 2) %>% select(hgnc_symbol)
kmeans(data_rna,
k,
nstart=50,
iter.max = 15 )
k
k <- 3
kmeans(data_rna,
k,
nstart=50,
iter.max = 15 )
kmeans(data_rna,
k,
nstart=50,
iter.max = 15 )$tot.withinss
k <- 4
kmeans(data_rna,
k,
nstart=50,
iter.max = 15 )$tot.withinss
1:k.max
wss <- sapply(1:k.max,
function(k)
{
kmeans(data_rna,
k,
nstart=50,
iter.max = 15 )$tot.withinss
})
wss <- sapply(1:k.max,
function(k)
{
kmeans(data_rna,
k,
nstart=50,
iter.max = 15 )$tot.withinss
})
wss
head(data)
colnames(data)
dim(data)
pheatmap(mat = data[1:100,2:4], annotation_row = data$hl.ratio  )
pheatmap(mat = data[1:100,2:4])
pheatmap(mat = data[1:100,2:4])
pheatmap(mat = data[1:10,2:4])
pheatmap(mat = data[1:10,2:4], cluster_cols = F)
