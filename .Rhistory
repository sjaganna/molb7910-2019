plot(foldchange$logCPM, foldchange$logFC.timehour04, pch = 16, col = ifelse(foldchange$hgnc_symbol %in% c("DUXA", "CCNA1", "ZSCAN4"), "red", "#10101020"), xlim = c(0, 16), ylim = c(-9, 12))
plot(foldchange$logCPM, foldchange$logFC.timehour08, pch = 16, col = ifelse(foldchange$hgnc_symbol %in% c("DUXA", "CCNA1", "ZSCAN4"), "red", "#10101020"), xlim = c(0, 16), ylim = c(-9, 12))
plot(foldchange$logCPM, foldchange$logFC.timehour14, pch = 16, col = ifelse(foldchange$hgnc_symbol %in% c("DUXA", "CCNA1", "ZSCAN4"), "red", "#10101020"), xlim = c(0, 16), ylim = c(-9, 12))
plot(foldchange$logCPM, foldchange$logFC.timehour04, pch = 16, col = ifelse(foldchange$hgnc_symbol %in% c("DUXA", "CCNA1", "ZSCAN4", "KHDC1L", "RFPL14"), "red", "#10101020"), xlim = c(0, 16), ylim = c(-9, 12))
View(foldchange)
plot(foldchange$logCPM, foldchange$logFC.timehour04, pch = 16, col = ifelse(foldchange$hgnc_symbol %in% c("DUXA", "CCNA1", "ZSCAN4", "KHDC1L", "RFPL1", "LEUTX", "DUXB", "ATP8A1"), "red", "#10101020"), xlim = c(0, 16), ylim = c(-9, 12))
plot(foldchange$logCPM, foldchange$logFC.timehour08, pch = 16, col = ifelse(foldchange$hgnc_symbol %in% c("DUXA", "CCNA1", "ZSCAN4", "KHDC1L", "RFPL1", "LEUTX", "DUXB", "ATP8A1"), "red", "#10101020"), xlim = c(0, 16), ylim = c(-9, 12))
plot(foldchange$logCPM, foldchange$logFC.timehour14, pch = 16, col = ifelse(foldchange$hgnc_symbol %in% c("DUXA", "CCNA1", "ZSCAN4", "KHDC1L", "RFPL1", "LEUTX", "DUXB", "ATP8A1"), "red", "#10101020"), xlim = c(0, 16), ylim = c(-9, 12))
names(foldchange)
data <- foldchange[, c(3, 16:18)]
data_long <- melt(data)
library(reshape2)
data_long <- melt(data)
View(data_long)
data_long <- data_long %>% filter(!is.na(hgnc_symbol))
View(data_long)
ggplot(data = long_dux_plot, aes(value)) + geom_line()
ggplot(data = data_long, aes(value)) + geom_line()
ggplot(data = data_long, aes(hgnc_symbol, value)) + geom_line()
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
install.packages("cluster")
install.packages("cluster")
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
hist(foldchange$logFC.timehour04)
hist(foldchange$logFC.timehour04, breaks = 40)
hist(foldchange$logFC.timehour04, breaks = 100)
hist(foldchange$logFC.timehour08, breaks = 100)
hist(foldchange$logFC.timehour14, breaks = 100)
hist(foldchange$logFC.timehour14, breaks = 100, xlim = c(-10, 12), col = "#FF101020
")
hist(foldchange$logFC.timehour14, breaks = 100, xlim = c(-10, 12), col = "#FF101020")
hist(foldchange$logFC.timehour08, breaks = 100, xlim = c(-10, 12), col = "#FF101050", add = T)
hist(foldchange$logFC.timehour04, breaks = 100, xlim = c(-10, 12), col = "#FF101090", add = T)
hist(foldchange$logFC.timehour14, breaks = 100, xlim = c(-10, 12), col = "#FF101020", ylim = c(0, 1000))
hist(foldchange$logFC.timehour08, breaks = 100, xlim = c(-10, 12), col = "#FF101050", add = T, ylim = c(0, 1000))
hist(foldchange$logFC.timehour08, breaks = 100, xlim = c(-10, 12), col = "#FF101050", add = T, ylim = c(0, 1200))
hist(foldchange$logFC.timehour14, breaks = 100, xlim = c(-10, 12), col = "#FF101020", ylim = c(0, 1200))
hist(foldchange$logFC.timehour08, breaks = 100, xlim = c(-10, 12), col = "#FF101050", add = T, ylim = c(0, 1200))
hist(foldchange$logFC.timehour04, breaks = 100, xlim = c(-10, 12), col = "#FF101090", add = T, ylim = c(0, 1200))
hist(foldchange$logFC.timehour14, breaks = 100, xlim = c(-10, 12), col = "#FF101020", ylim = c(0, 1500))
hist(foldchange$logFC.timehour08, breaks = 100, xlim = c(-10, 12), col = "#FF101050", add = T, ylim = c(0, 1500))
hist(foldchange$logFC.timehour04, breaks = 100, xlim = c(-10, 12), col = "#FF101090", add = T, ylim = c(0, 1500))
hist(foldchange$logFC.timehour14, breaks = 100, xlim = c(-10, 12), col = "#FF101020", ylim = c(0, 1500))
hist(foldchange$logFC.timehour08, breaks = 100, xlim = c(-10, 12), col = "#FF101050", add = T, ylim = c(0, 1500))
hist(foldchange$logFC.timehour04, breaks = 50, xlim = c(-10, 12), col = "#FF101090", add = T, ylim = c(0, 1500))
install.packages("factoextra")
library("factoextra")
names(data)
data <- data.frame(data)
row.names(data) <- data$hgnc_symbol
rownames(data) <- data$hgnc_symbol
rowNames(data) <- data$hgnc_symbol
row.names(data)
row.names(data) <- data$hgnc_symbol
data
names(data)
install.packages("pheatmap")
library(pheatmap)
heat.colors <- brewer.pal(6, "YlOrRd")
data <- foldchange[, c(3, 16:18)]
pheatmap(mat = data[, c(2:4)],
border_color = "black",
cluster_rows = T,
cluster_cols = T )
data1 <- data[complete.cases(data), ]
pheatmap(mat = data1[, c(2:4)],
border_color = "black",
cluster_rows = T,
cluster_cols = T )
pheatmap(mat = data1[, c(2:4)],
border_color = "black",
cluster_rows = T,
cluster_cols = T )
DUX4 <- topTags(d2, n=500)
foldchange <- cbind(id = row.names(DUX4$table), DUX4$table)
foldchange <- left_join(data_gene_level, foldchange, by = c("ensembl_gene_id" = "id"))
foldchange <- unique(foldchange)
View(foldchange)
data <- foldchange[, c(3, 16:18)]
data1 <- data[complete.cases(data), ]
View(data1)
pheatmap(mat = data1[, c(2:4)],
border_color = "black",
cluster_rows = T,
cluster_cols = T )
pheatmap(mat = data1[, c(2:4)],
border_color = "black",
cluster_rows = T,
cluster_cols = T )
DUX4 <- topTags(d2, n=100)
foldchange <- cbind(id = row.names(DUX4$table), DUX4$table)
foldchange <- left_join(data_gene_level, foldchange, by = c("ensembl_gene_id" = "id"))
foldchange <- unique(foldchange)
data <- foldchange[, c(3, 16:18)]
data1 <- data[complete.cases(data), ]
pheatmap(mat = data1[, c(2:4)],
border_color = "black",
cluster_rows = T,
cluster_cols = T )
pheatmap(mat = data1[, c(2:4)],
border_color = "",
cluster_rows = T,
cluster_cols = T )
pheatmap(mat = data1[, c(2:4)],
cluster_rows = T,
cluster_cols = T )
cor_data <- as.matrix(data[,2:4])
rownames(cor_data) <- data$hgnc_symbol
nrow(cor_data)
nrow(data1)
cor_data <- as.matrix(data1[,2:4])
nrow(cor_data)
rownames(cor_data) <- data1$hgnc_symbol
heatmap_cluster_targets <- pheatmap(mat = cor_data,
clustering_method = "ward.D2", #specify clustering method
clustering_distance_rows = "euclidean",
border_color = "black",
cluster_rows = T,
cluster_cols = F # no need to cluster columns
)
plot(heatmap_cluster_targets$tree_row)
design
View(data)
View(data)
View(data_gene_level)
View(DUX4_14h)
View(foldchange)
d <- d[keep, , keep.lib.sizes=FALSE]
# 2. Define sample grouping
time <- factor( c("hour00", "hour00", "hour00", "hour04", "hour04", "hour04", "hour08", "hour08", "hour08", "hour14", "hour14", "hour14"))
# 3. Generate a DGE list
d <- DGEList(counts=x, group = time)
# 4. Filter genes with low counts (require >1 cpm in at least 1/2 of the samples)
keep <- rowSums(cpm(d)>1) >= 3
d <- d[keep, , keep.lib.sizes=FALSE]
# 5. Calculate normalization factors to scale the raw library sizes.
d <- calcNormFactors(d)
# 6. create a model matrix to allow linear modeling
design <- model.matrix(~time)
# 7. estimate dispersion
d <- estimateDisp(d, design)
# 7. estimate dispersion
d <- estimateDisp(d, design)
# 8. Fit a generalized linear model
d1 <- glmFit(d, design)
# 9. Conduct Tagwise likelihood ratio tests for DGEGLM
d2 <- glmLRT(d1, coef=2:4)
names(d2)
names(d1)
head(d2$table)
# 10. Extract the most differentially expressed genes.
DUX4 <- topTags(d2, n=10733)
names(DUX4)
head(DUX4$table)
tail(DUX4$table)
DUX4_sig <- topTags(d2, p.value = .05)
dim(DUX4_sig$table)
DUX4_sig$table
DUX4_sig$table
DUX4_sig <- topTags(d2, p.value = .1)
dim(DUX4_sig$table)
DUX4_sig <- topTags(d2, p.value = .01)
dim(DUX4_sig$table)
DUX4_sig <- topTags(d2, p.value = .5)
dim(DUX4_sig$table)
# 10. Extract the most differentially expressed genes.
DUX4 <- topTags(d2, n=10733)
DUX4$table %>% filter(FDR < 0.05) %>% count()
DUX4$table %>% filter(FDR < 0.01) %>% count()
# 9. Conduct Tagwise likelihood ratio tests for DGEGLM
d2 <- glmLRT(d1, coef=2)
# 10. Extract the most differentially expressed genes.
DUX4 <- topTags(d2, n=10733)
DUX4$table %>% filter(FDR < 0.01) %>% count()
# 9. Conduct Tagwise likelihood ratio tests for DGEGLM
d2 <- glmLRT(d1, coef=4)
# 10. Extract the most differentially expressed genes.
DUX4 <- topTags(d2, n=10733)
DUX4$table %>% filter(FDR < 0.01) %>% count()
# 9. Conduct Tagwise likelihood ratio tests for DGEGLM
d2 <- glmLRT(d1, coef=3)
# 10. Extract the most differentially expressed genes.
DUX4 <- topTags(d2, n=10733)
DUX4$table %>% filter(FDR < 0.01) %>% count()
# 10. Extract the most differentially expressed genes.
DUX4 <- topTags(d2, n=10733)
dux_clust <- DUX4$table
DUX4_sig <- topTags(d2, n=200)
dux_clust <- DUX4_sig$table
class(dux_clust)
head(dux_clust)
View(dux_clust)
# 9. Conduct Tagwise likelihood ratio tests for DGEGLM
d2 <- glmLRT(d1, coef=2:4)
# 10. Extract the most differentially expressed genes.
DUX4 <- topTags(d2, n=10733)
DUX4_sig <- topTags(d2, n=200)
dux_sig_genes <- DUX4_sig$table
View(dux_sig_genes)
library(pheatmap)
dux_sig_genes[,1:3]
pheatmap(mat = dux_sig_genes[,1:3], kmeans_k = 3)
dux_heatmap <- pheatmap(mat = dux_sig_genes[,1:3], kmeans_k = 3)
dux_heatmap$kmeans
dux_heatmap$kmeans$cluster
table(dux_heatmap$kmeans$cluster)
dux_heatmap <- pheatmap(mat = dux_sig_genes[,1:3], kmeans_k = 4)
dux_heatmap <- pheatmap(mat = dux_sig_genes[,1:3], kmeans_k = 3)
# 10. Extract the most differentially expressed genes.
DUX4 <- topTags(d2, n=10733)
dux_sig_genes <- DUX4_sig$table
dux_genes <- DUX4$table
dux_heatmap <- pheatmap(mat = dux_sig_genes[,1:3], kmeans_k = 3)
dux_heatmap <- pheatmap(mat = dux_genes[,1:3], kmeans_k = 3)
dux_heatmap <- pheatmap(mat = dux_genes[,1:3], kmeans_k = 6)
dux_heatmap <- pheatmap(mat = dux_genes[,1:3], kmeans_k = 10)
dux_heatmap <- pheatmap(mat = dux_genes[,1:3], kmeans_k = 9)
dux_heatmap <- pheatmap(mat = dux_genes[,1:3], kmeans_k = 8)
dux_heatmap <- pheatmap(mat = dux_genes[,1:3], kmeans_k = 7)
dux_heatmap <- pheatmap(mat = dux_genes[,1:3], kmeans_k = 6)
dux_heatmap <- pheatmap(mat = dux_genes[,1:3], kmeans_k = 5)
dux_heatmap <- pheatmap(mat = dux_genes[,1:3], kmeans_k = 6)
# 10. Extract the most differentially expressed genes.
DUX4 <- topTags(d2, n=10733)
DUX4_sig <- topTags(d2, n=200)
dux_genes <- DUX4$table
dux_sig_genes <- DUX4_sig$table
dux_heatmap <- pheatmap(mat = dux_genes[,1:3], kmeans_k = 3)
dux_heatmap
pheatmap(mat = dux_genes[,1:3], kmeans_k = 3)
pheatmap(mat = dux_sig_genes[,1:3], kmeans_k = 3)
dux_heatmap_all <- pheatmap(mat = dux_genes[,1:3], kmeans_k = 3)
names(dux_heatmap_all)
plot(dux_heatmap_all$tree_row)
plot(dux_heatmap_all$tree_col)
plot(dux_heatmap_all$kmeans)
dux_heatmap_all$kmeans
names(dux_heatmap_all)
head(dux_heatmap_all$gtable)
head(dux_heatmap_all$kmeans)
names(dux_heatmap_all$kmeans)
names(dux_heatmap_all$kmeans$cluster)
names(dux_heatmap_all$kmeans)
names(dux_heatmap_all$kmeans$cluster)
head(names(dux_heatmap_all$kmeans$cluster))
head(names(dux_heatmap_all$kmeans$size))
library(readxl)
Supp_data_2_data_rnaseq_silac_static <- read_excel("~/Desktop/CU-onedrive/OneDrive - The University of Colorado Denver/02-manuscripts/2018_Jagannathan_Tapscott_eLife/SJ-dux4proteome-first-submission/Supp data 2_data.rnaseq.silac.static.xlsx",
skip = 2)
View(Supp_data_2_data_rnaseq_silac_static)
data_proteomics <- Supp_data_2_data_rnaseq_silac_static[, c(2, 39, 49)]
View(dux_genes)
names(data_proteomics)
dux_genes <- DUX4$table
names(dux_genes)
foldchange <- cbind(id = row.names(DUX4$table), DUX4$table)
foldchange <- left_join(data_gene_level, foldchange, by = c("ensembl_gene_id" = "id"))
foldchange <- unique(foldchange)
names(foldchange)
data <- foldchange[, c(3, 16:18)]
View(data)
names(data)
View(data_proteomics)
data <- right_join(data, data_proteomics, by = c(`hgnc_symbol` = `geneid`))
data <- right_join(data, data_proteomics, by = c("hgnc_symbol" = "geneid"))
View(data)
data <- data[complete.cases(data), ]
View(data)
data <- data[, c(1:5)]
data <- data[complete.cases(data), ]
View(data)
#data <- data[complete.cases(data), ]
data <- data %>% filter(!is.na(hl.ratio))
View(data)
View(data)
#data <- data[complete.cases(data), ]
data <- data %>% filter(!is.numeric(hl.ratio))
View(data)
table(is.na(data$hl.ratio))
#data <- data[complete.cases(data), ]
data <- data %>% filter(hl.ratio != "NA")
View(data)
View(data)
pheatmap(mat = data[,2:5], kmeans_k = 3)
data[, 2:5]
data$hl.ratio <- as.numeric(as.character(data$hl.ratio))
data[, 2:5]
pheatmap(mat = data[,2:5], kmeans_k = 3)
pheatmap(mat = data[,2:5], kmeans_k = 5)
pheatmap(mat = data[,2:5], kmeans_k = 5)
library(pheatmap)
pheatmap(mat = data[,2:5], kmeans_k = 5)
pheatmap(mat = data[,2:5], kmeans_k = 3)
pheatmap(mat = data[,2:5], kmeans_k = 3)
pheatmap(mat = data[,2:5], kmeans_k = 10)
pheatmap(mat = data[,2:5], kmeans_k = 10)
pheatmap(mat = data[,2:5], kmeans_k = 8)
pheatmap(mat = data[,2:5], kmeans_k = 8)
View(data)
library(here) # setting wdir
library(tidyverse) # data-warngling
library(reshape2) # converting data from wide-to-long and long-to-wide
library(ggplot2) # plotting
library(ggthemes) # pretty plotting themes
library(ggrepel) # make nice data point labels
library(scales) # nice annotating of x/y axes in plots
library(viridis) # nice color pallete
library(corrplot) # easy correlation plots
library(pheatmap) # easy heatmaps
here()
getwd()
setwd("~/Desktop/CU-onedrive/OneDrive - The University of Colorado Denver/09-teaching/molb7910")
data_genelevel <- read_delim(file = "2-class2/data/data_genelevel.tsv",
delim = "\t",
escape_double = FALSE,
trim_ws = TRUE)
# histogram
ggplot(data = data_genelevel, aes(x = hour00_rep1)) +
geom_histogram(bins = 50) +
theme_few() +
ggtitle("histogram")
ggtitle("histogram")
ggplot(data = data_genelevel, aes(x = hour00_rep1)) +
geom_histogram(bins = 50) +
theme_few() +
ggtitle("histogram")
ggplot(long_genelevel, aes(x=Count + 1, color = Sample)) +
geom_density() +
scale_x_log10() +
theme_few() +
theme(legend.position="right") +
ggtitle("density samples log10-scale with pseudocount")
long_genelevel <- melt(data_genelevel) # convert from wide-to-long
names(long_genelevel) <- c("gene_symbol","Target","Sample", "Count") # rename columns
dux_targets <- read_csv(file = "2-class2/data/target_genes.csv"
)
data_genelevel$target <- if_else(condition = data_genelevel$gene_symbol %in% dux_targets$hgnc_symbol,
true = "target",
false = "not_target"
)
table(data_genelevel$target)
data_genelevel %>% group_by(target) %>% summarise_all(funs(mean))
data_genelevel %>% group_by(target) %>% select(-gene_symbol) %>% summarise_all(funs(mean))
long_genelevel <- melt(data_genelevel) # convert from wide-to-long
names(long_genelevel) <- c("gene_symbol","Target","Sample", "Count") # rename columns
head(long_genelevel)
summary_target_sample <- long_genelevel %>% group_by(Target,Sample) %>% select(-gene_symbol) %>% summarise(Mean=mean(Count))
summary_target_sample
# histogram
ggplot(data = data_genelevel, aes(x = hour00_rep1)) +
geom_histogram(bins = 50) +
theme_few() +
ggtitle("histogram")
# histogram
ggplot(data = data_genelevel, aes(x = hour00_rep1)) +
geom_histogram(bins = 50) +
theme_few() +
ggtitle("histogram")
ggplot(data = data_genelevel, aes(x = hour00_rep1, y = hour00_rep2)) +
geom_point() +
theme_few() +
ggtitle("scattter plot")
ggplot(long_genelevel, aes(x=Count + 1, color = Sample)) +
geom_density() +
scale_x_log10() +
theme_few() +
theme(legend.position="right") +
ggtitle("density samples log10-scale with pseudocount")
nrow(long_genelevel)
data_genelevel
data_genelevel <- data_genelevel %>% mutate(hour00_rep1_cpm = cpm(hour00_rep1))
View(data_genelevel)
data_genelevel <- data_genelevel %>% mutate(hour00_rep2_cpm = cpm(hour00_rep2))
data_genelevel <- data_genelevel %>% mutate(hour00_rep3_cpm = cpm(hour00_rep3))
data_genelevel <- data_genelevel %>% mutate(hour04_rep1_cpm = cpm(hour04_rep1))
data_genelevel <- data_genelevel %>% mutate(hour04_rep2_cpm = cpm(hour04_rep2))
data_genelevel <- data_genelevel %>% mutate(hour04_rep3_cpm = cpm(hour04_rep3))
data_genelevel <- data_genelevel %>% mutate(hour08_rep3_cpm = cpm(hour08_rep3))
data_genelevel <- data_genelevel %>% mutate(hour08_rep1_cpm = cpm(hour08_rep1))
data_genelevel <- data_genelevel %>% mutate(hour08_rep2_cpm = cpm(hour08_rep2))
data_genelevel <- data_genelevel %>% mutate(hour14_rep1_cpm = cpm(hour14_rep1))
data_genelevel <- data_genelevel %>% mutate(hour14_rep2_cpm = cpm(hour14_rep2))
data_genelevel <- data_genelevel %>% mutate(hour14_rep3_cpm = cpm(hour14_rep3))
long_genelevel <- melt(data_genelevel) # convert from wide-to-long
View(long_genelevel)
table(long_genelevel$variable)
names(long_genelevel) <- c("gene_symbol","Target","Sample", "Count") # rename columns
ggplot(long_genelevel, aes(x=Count + 1, color = Sample)) +
geom_density() +
scale_x_log10() +
theme_few() +
theme(legend.position="right") +
ggtitle("density samples log10-scale with pseudocount")
# density of all samples log10-scale with pseudocount
ggplot(long_genelevel, aes(x=Count + 1, color = Sample)) +
geom_density() +
scale_x_log10() +
theme_few() +
theme(legend.position="") +
ggtitle("density samples log10-scale with pseudocount")
# density of all samples log10-scale with pseudocount
ggplot(long_genelevel, aes(x=Count + 1, color = Sample)) +
geom_density() +
scale_x_log10() +
theme_few() +
theme(legend.position="right") +
ggtitle("density samples log10-scale with pseudocount")
pheatmap(mat = data[,2:5], kmeans_k = 8)
pheatmap(mat = data[,3:5], kmeans_k = 8)
names(data)
pheatmap(mat = data[,2:4], kmeans_k = 8)
pheatmap(mat = data[,2:5], kmeans_k = 8)
pheatmap(mat = data[,2:5], kmeans_k = 4)
pheatmap(mat = data[,2:4], kmeans_k = 3)
pheatmap(mat = data[,2:4], kmeans_k = 4)
pheatmap(mat = data[,2:4], kmeans_k = 5)
pheatmap(mat = data[,2:4], kmeans_k = 6)
pheatmap(mat = data[,2:4], kmeans_k = 8)
pheatmap(mat = data[,2:4], kmeans_k = 10)
heamap_cluster <- pheatmap(mat = data[,2:4], kmeans_k = 10)
names(heatmap_cluster)
heatmap_cluster <- pheatmap(mat = data[,2:4], kmeans_k = 10)
names(heatmap_cluster)
names(heatmap_cluster$kmeans)
names(heatmap_cluster$kmeans$cluster)
heatmap_cluster$kmeans$cluster
table(heatmap_cluster$kmeans$cluster)
pheatmap(mat = data[,2:4], kmeans_k = 10)
pheatmap(mat = data[,2:4], kmeans_k = 10)
pheatmap(mat = data[,2:4], kmeans_k = 10)
pheatmap(mat = data[,2:4], kmeans_k = 10)
pheatmap(mat = data[,2:4], kmeans_k = 10)
pheatmap(mat = data[,2:4], kmeans_k = 10)
pheatmap(mat = data[,2:4], kmeans_k = 10)
pheatmap(mat = data[,2:4], kmeans_k = 10)
pheatmap(mat = data[,2:4], kmeans_k = 10)
pheatmap(mat = data[,2:4], kmeans_k = 10)
pheatmap(mat = data[,2:4], kmeans_k = 10)
pheatmap(mat = data[,2:4], kmeans_k = 10)
pheatmap(mat = data[,2:4], kmeans_k = 10)
pheatmap(mat = data[,2:5], kmeans_k = 10)
pheatmap(mat = data[,2:5], kmeans_k = 10)
pheatmap(mat = data[,2:5], kmeans_k = 10)
pheatmap(mat = data[,2:5], kmeans_k = 10)
pheatmap(mat = data[,2:5], kmeans_k = 10)
pheatmap(mat = data[,2:5], kmeans_k = 10)
pheatmap(mat = data[,2:5], kmeans_k = 10)
pheatmap(mat = data[,2:5], kmeans_k = 10)
pheatmap(mat = data[,2:5], kmeans_k = 10)
pheatmap(mat = data[,2:5], kmeans_k = 10)
pheatmap(mat = data[,2:5], kmeans_k = 10)
pheatmap(mat = data[,2:5], kmeans_k = 10)
heatmap_clusters <- pheatmap(mat = data[,2:5], kmeans_k = 10)
heatmap_clusters
heatmap_clusters
heatmap_clusters
heatmap_clusters$kmeans
clusters <- data.frame(genes = row.names(heatmap_cluster$kmeans$cluster), clusters = heatmap_cluster$kmeans$cluster)
row.names(heatmap_clusters$kmeans)
row.names(heatmap_clusters$kmeans$cluster)
names(heatmap_clusters$kmeans$cluster)
names(heatmap_clusters$kmeans$centers)
heatmap_clusters$kmeans$centers
heatmap_clusters$kmeans$cluster
cbind(data$hgnc_symbol, heatmap_clusters$kmeans$cluster)
data <- cbind(hgnc_symbol = data$hgnc_symbol, cluster = heatmap_clusters$kmeans$cluster)
View(data)
heatmap_clusters
heatmap_clusters
heatmap_clusters
heatmap_clusters
table(data$cluster)
table(data.frame(data$cluster))
View(data_long)
foldchange <- cbind(id = row.names(DUX4$table), DUX4$table)
foldchange <- left_join(data_gene_level, foldchange, by = c("ensembl_gene_id" = "id"))
foldchange <- unique(foldchange)
data <- foldchange[, c(3, 16:18)]
data <- right_join(data, data_proteomics, by = c("hgnc_symbol" = "geneid"))
data <- data[, c(1:5)]
#data <- data[complete.cases(data), ]
data <- data %>% filter(hl.ratio != "NA")
data$hl.ratio <- as.numeric(as.character(data$hl.ratio))
plot(data$logFC.timehour04, data$hl.ratio)
plot(data$logFC.timehour08, data$hl.ratio)
plot(data$logFC.timehour14, data$hl.ratio)
pheatmap(mat = data[,2:5], kmeans_k = 4)
names(Data)
names(data)
glimpse(data)
pheatmap(mat = data[,2:5], kmeans_k = 4)
data <- data[complete.cases(data), ]
pheatmap(mat = data[,2:5], kmeans_k = 4)
pheatmap(mat = data[,2:5], kmeans_k = 4)
heatmap_clusters <- pheatmap(mat = data[,2:5], kmeans_k = 4)
heatmap_clusters
data_clusters <- cbind(hgnc_symbol = data$hgnc_symbol, cluster = heatmap_clusters$kmeans$cluster)
View(data_clusters)
data_clusters <- tbl_df(cbind(hgnc_symbol = data$hgnc_symbol, cluster = heatmap_clusters$kmeans$cluster))
View(data_clusters)
plot(data_clusters$cluster)
data_with_clusters <- full_join(data, data_clusters)
View(data_with_clusters)
ggplot(data = data_with_clusters %>% filter(cluster == 1), mapping = aes(x = logFC.timehour14, y = hl.ratio)) + geom_point()
ggplot(data = data_with_clusters %>% filter(cluster == 2), mapping = aes(x = logFC.timehour14, y = hl.ratio)) + geom_point()
ggplot(data = data_with_clusters %>% filter(cluster == 3), mapping = aes(x = logFC.timehour14, y = hl.ratio)) + geom_point()
ggplot(data = data_with_clusters %>% filter(cluster == 4), mapping = aes(x = logFC.timehour14, y = hl.ratio)) + geom_point()
heatmap_cluster
heatmap_clusters
ggplot(data = data_with_clusters %>% filter(cluster == 1), mapping = aes(x = logFC.timehour14, y = hl.ratio)) + geom_point()
